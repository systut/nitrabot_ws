<launch>

  <arg name="model" default="$(find nitrabot_description)/urdf/industrial_robot.urdf.xacro"/>
  <arg name="rvizconfig" default="$(find nitrabot_description)/rviz/urdf.rviz"/>
  <arg name="world_name" default="worlds/empty.world"/>

  <!-- Launch gazebo -->
  <include file="$(find nitrabot_description)/launch/gazebo.launch">
    <arg name="model" value="$(arg model)"/>
    <arg name="world_name" value="$(arg world_name)"/>
   </include>

  <!-- Launch Odometry from Gazebo -->
  <include file="$(find odom_publisher)/launch/start_odom.launch" />

  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)"/> -->

  <!-- Load joint controller configuration from YAML file to parameter server -->
  <rosparam file="$(find nitrabot_description)/config/joint_states.yaml" command="load"/>
  <rosparam file="$(find nitrabot_description)/config/wheel_velocity_controller.yaml" command="load"/>
  <!-- <rosparam file="$(find nitrabot_description)/config/pid_for_gazebo_ros_control.yaml" command="load"/> -->


  <!-- load the controllers -->
  <node name="robot_controller_spawner" pkg="controller_manager" type="spawner"
    respawn="false" output="screen" ns="nitrabot_description"
     args="joint_state_controller
           left_wheel_velocity_controller
	   right_wheel_velocity_controller" />

  <!-- convert joint states to TF transforms for rviz, etc -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
      respawn="false" output="screen">
      <remap from="joint_states" to="nitrabot_description/joint_states" />
  </node>


  <!-- Launch the node to use twist message -->
  <node name="rqt_robot_steering" pkg="rqt_robot_steering" type="rqt_robot_steering">
    <param name="default_topic" value="/cmd_vel"/>
  </node>

</launch>
