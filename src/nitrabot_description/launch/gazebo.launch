<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="world_name" default="worlds/empty.world"/>
  <arg name="model" default="$(find nitrabot_description)/urdf/industrial_robot.urdf.xacro"/>
  
  <!-- We resume the logic in empty_world.launch -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->

  <param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->

  <!-- Load controller configuration -->
  <rosparam command="load" file="$(find nitrabot_description)/config/control.yaml" />

  <!-- Spawn controllers -->
  <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
        args="nitrabot_joint_publisher nitrabot_velocity_controller"/>

  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-z 2.0 -x 0.0 -y 0.0 -unpause -urdf -model industrial_robot -param robot_description"/>

</launch>
